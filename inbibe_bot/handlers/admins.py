import logging

from inbibe_bot.bot_instance import bot, ADMIN_GROUP_ID
from inbibe_bot.models import Source
from inbibe_bot.storage import bookings, alt_requests
from inbibe_bot.utils import format_date_russian, parse_date_time, send_vk_message

logger = logging.getLogger(__name__)


@bot.callback_query_handler(func=lambda call: call.data.startswith("approve_alt_") or
                                              call.data.startswith("approve_") or
                                              call.data.startswith("reject_"))  # type: ignore
def callback_handler(call):
    data = call.data
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback —Å –¥–∞–Ω–Ω—ã–º–∏: {data}")

    if data.startswith("approve_alt_"):
        booking_id = data.split("_", 2)[2]
        booking = bookings.get(booking_id)
        if not booking:
            logger.error(f"–ó–∞—è–≤–∫–∞ —Å id {booking_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏.")
            bot.answer_callback_query(call.id, "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
            return
        msg = bot.send_message(
            ADMIN_GROUP_ID,
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 15.09.25 16:43 –¥–ª—è –∑–∞—è–≤–∫–∏ (—Ç–µ–ª–µ—Ñ–æ–Ω: {booking.phone}).\n"
            f"(–æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ):",
        )
        alt_requests[booking_id] = msg.message_id
        logger.info(
            f"–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –∞–¥–º–∏–Ω-–≥—Ä—É–ø–ø—É –¥–ª—è –∑–∞—è–≤–∫–∏ {booking_id}, message_id: {msg.message_id}"
        )
        bot.answer_callback_query(call.id, "–û–∂–∏–¥–∞–µ—Ç—Å—è –Ω–æ–≤–∞—è –¥–∞—Ç–∞/–≤—Ä–µ–º—è.")
        return

    if data.startswith("approve_"):
        booking_id = data.split("_", 1)[1]
        booking = bookings.get(booking_id)
        if not booking:
            logger.error(f"–ó–∞—è–≤–∫–∞ —Å id {booking_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
            bot.answer_callback_query(call.id, "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
            return
        formatted_date = format_date_russian(booking.date_time)
        time_str = booking.date_time.strftime('%H:%M')

        text_to_user = (
            f"‚úÖ {booking.name}, –≤–∞—à–∞ –±—Ä–æ–Ω—å –Ω–∞ {formatted_date} –≤ {time_str} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞."
        )
        if booking.source == Source.TG:
            text_to_user += "\n–î–ª—è –Ω–æ–≤–æ–π –±—Ä–æ–Ω–∏ –≤–≤–µ–¥–∏—Ç–µ /start"
            bot.send_message(booking.user_id, text_to_user)
            logger.info(f"–ó–∞—è–≤–∫–∞ {booking_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {booking.user_id} —É–≤–µ–¥–æ–º–ª—ë–Ω.")

        else:
            sent = send_vk_message(booking.user_id, text_to_user)
            logger.info(
                f"–ó–∞—è–≤–∫–∞ {booking_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. VK-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {booking.user_id} —É–≤–µ–¥–æ–º–ª—ë–Ω: {sent}."
            )

        new_text = (
            "‚úÖ *–ó–∞—è–≤–∫–∞ –±—Ä–æ–Ω–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞:*\n"
            f"üë§ –ò–º—è: {booking.user_id}\n"
            f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π: {booking.guests}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {booking.phone}\n"
            f"üìÖ –î–∞—Ç–∞: {formatted_date}\n"
            f"‚è∞ –í—Ä–µ–º—è: {time_str}\n"
            f"üåê –ò—Å—Ç–æ—á–Ω–∏–∫: {booking.source.value}"
        )
    elif data.startswith("reject_"):
        booking_id = data.split("_", 1)[1]
        booking = bookings.get(booking_id)
        if not booking:
            logger.error(f"–ó–∞—è–≤–∫–∞ —Å id {booking_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è.")
            bot.answer_callback_query(call.id, "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
            return
        user_id = booking.user_id
        name = booking.name
        phone = booking.phone
        formatted_date = format_date_russian(booking.date_time)
        time_str = booking.date_time.strftime('%H:%M')

        text_to_user = (
            f"‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, {name}. –í–∞—à–∞ –±—Ä–æ–Ω—å –Ω–∞ {formatted_date} –≤ {time_str} –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞."
        )
        if booking.source == Source.TG:
            text_to_user += "\n–î–ª—è –Ω–æ–≤–æ–π –±—Ä–æ–Ω–∏ –≤–≤–µ–¥–∏—Ç–µ /start"
            bot.send_message(user_id, text_to_user)
            logger.info(f"–ó–∞—è–≤–∫–∞ {booking_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–≤–µ–¥–æ–º–ª—ë–Ω.")
        else:
            sent = send_vk_message(booking.user_id, text_to_user)
            logger.info(
                f"–ó–∞—è–≤–∫–∞ {booking_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. VK-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {booking.user_id} —É–≤–µ–¥–æ–º–ª—ë–Ω: {sent}."
            )

        new_text = (
            "‚ùå *–ó–∞—è–≤–∫–∞ –±—Ä–æ–Ω–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞:*\n"
            f"üë§ –ò–º—è: {name}\n"
            f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π: {booking.guests}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
            f"üìÖ –î–∞—Ç–∞: {formatted_date}\n"
            f"‚è∞ –í—Ä–µ–º—è: {time_str}\n"
            f"üåê –ò—Å—Ç–æ—á–Ω–∏–∫: {booking.source.value}"
        )

    try:
        # noinspection PyUnboundLocalVariable
        bot.edit_message_text(new_text, chat_id=call.message.chat.id, message_id=booking.message_id)
        logger.debug(f"–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ {booking.id}: {new_text}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∑–∞—è–≤–∫–∏ {booking.id}: {e}")
    bot.answer_callback_query(call.id, "–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ.")
    if booking.id in bookings:
        del bookings[booking.id]
        logger.debug(f"–ó–∞—è–≤–∫–∞ {booking.id} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞.")


@bot.message_handler(func=lambda message: message.chat.id == ADMIN_GROUP_ID and
                                          message.reply_to_message and
                                          message.reply_to_message.message_id in alt_requests.values())  # type: ignore
def handle_alt_date_time(message):
    booking_id = None
    for b_id, msg_id in alt_requests.items():
        if msg_id == message.reply_to_message.message_id:
            booking_id = b_id
            break
    if not booking_id:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å booking_id –ø–æ message.reply_to_message.message_id.")
        return
    logger.info(
        f"–î–ª—è –∑–∞—è–≤–∫–∏ {booking_id} –ø–æ–ª—É—á–µ–Ω–æ –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏: {message.text}"
    )

    booking = bookings.get(booking_id)
    if not booking:
        logger.error(f"–ó–∞—è–≤–∫–∞ —Å id {booking_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏.")
        bot.reply_to(message, "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    new_date_time = parse_date_time(message.text)
    if new_date_time is None:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∑–∞—è–≤–∫–∏ {booking_id}: {message.text}")
        bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n–û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: MM.DD.YY HH:MM")
        return

    booking.date_time = new_date_time
    formatted_date = format_date_russian(new_date_time)
    time_str = new_date_time.time().strftime('%H:%M')

    text_to_user = (
        f"‚úÖ {booking.name}, –≤–∞—à–∞ –±—Ä–æ–Ω—å –Ω–∞ {formatted_date} –≤ {time_str} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞."
    )

    if booking.source == Source.TG:
        text_to_user += "\n–î–ª—è –Ω–æ–≤–æ–π –±—Ä–æ–Ω–∏ –≤–≤–µ–¥–∏—Ç–µ /start"
        bot.send_message(
            booking.user_id,
            text_to_user,
        )
    else:
        send_vk_message(booking.user_id, text_to_user)


    new_text = (
        "‚úÖ *–ó–∞—è–≤–∫–∞ –±—Ä–æ–Ω–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞:*\n"
        f"üë§ –ò–º—è: {booking.user_id}\n"
        f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π: {booking.guests}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {booking.phone}\n"
        f"üìÖ –î–∞—Ç–∞: {formatted_date}\n"
        f"‚è∞ –í—Ä–µ–º—è: {time_str}\n"
        f"üåê –ò—Å—Ç–æ—á–Ω–∏–∫: {booking.source.value}"
    )

    try:
        bot.edit_message_text(new_text, chat_id=ADMIN_GROUP_ID, message_id=booking.message_id)
        logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ {booking_id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {new_text}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ {booking_id}: {e}")

    try:
        bot.delete_message(ADMIN_GROUP_ID, alt_requests[booking_id])
        logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –¥–ª—è –∑–∞—è–≤–∫–∏ {booking_id} —É–¥–∞–ª–µ–Ω–æ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∑–∞—è–≤–∫–∏ {booking_id}: {e}")
    try:
        bot.delete_message(ADMIN_GROUP_ID, message.message_id)
        logger.debug(f"–û—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–∞—è–≤–∫–∏ {booking_id} —É–¥–∞–ª–µ–Ω–æ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∑–∞—è–≤–∫–∏ {booking_id}: {e}")

    del alt_requests[booking_id]
    logger.debug(f"–ó–∞—è–≤–∫–∞ {booking_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ alt_requests.")
