"""Helper utilities for booking approval flows used by admin handlers."""

from __future__ import annotations

import logging

from inbibe_bot.bot_instance import bot
from inbibe_bot.models import Booking, Source
from inbibe_bot.storage import bookings, not_sent_bookings, table_requests, alt_requests
from inbibe_bot.utils import format_date_russian, send_vk_message
from inbibe_bot.temporary_messages import clear_ephemeral_messages

logger = logging.getLogger(__name__)


def notify_user_booking_status(
        booking: Booking,
        approved: bool,
) -> None:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –±—Ä–æ–Ω–∏."""

    formatted_date = format_date_russian(booking.date_time)
    time_str = booking.date_time.strftime("%H:%M")

    if approved:
        text_to_user = f"‚úÖ {booking.name}, –≤–∞—à–∞ –±—Ä–æ–Ω—å –Ω–∞ {formatted_date} –≤ {time_str} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞."
        log_action = "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞"
    else:
        text_to_user = f"‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, {booking.name}. –í–∞—à–∞ –±—Ä–æ–Ω—å –Ω–∞ {formatted_date} –≤ {time_str} –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞."
        log_action = "–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞"

    if booking.source == Source.TG:
        text_to_user += "\n–î–ª—è –Ω–æ–≤–æ–π –±—Ä–æ–Ω–∏ –≤–≤–µ–¥–∏—Ç–µ /start"
        try:
            bot.send_message(booking.user_id, text_to_user)
            logger.info("–ó–∞—è–≤–∫–∞ %s %s. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å TG %s —É–≤–µ–¥–æ–º–ª—ë–Ω.", booking.id, log_action, booking.user_id)
        except Exception:
            logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è TG %s –æ —Ç–æ–º, —á—Ç–æ –∑–∞—è–≤–∫–∞ %s.", booking.user_id,
                             log_action)
    else:
        try:
            sent = send_vk_message(booking.user_id, text_to_user)
            logger.info(
                "–ó–∞—è–≤–∫–∞ %s %s. VK-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s —É–≤–µ–¥–æ–º–ª—ë–Ω: %s.",
                booking.id, log_action, booking.user_id, sent,
            )
        except Exception:
            logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è VK %s –æ —Ç–æ–º, —á—Ç–æ –∑–∞—è–≤–∫–∞ %s.", booking.user_id,
                             log_action)


def _build_admin_final_text(booking: Booking, is_success: bool) -> str:
    status_line = "‚úÖ *–ó–∞—è–≤–∫–∞ –±—Ä–æ–Ω–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞:*" if is_success else "‚ùå *–ó–∞—è–≤–∫–∞ –±—Ä–æ–Ω–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞:*"
    tables = ", ".join(str(x) for x in sorted(booking.table_numbers)) or "‚Äî"

    return (
        f"{status_line}\n"
        f"üÜî ID: {booking.id}\n"
        f"üë§ –ò–º—è: {booking.name}\n"
        f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π: {booking.guests}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {booking.phone}\n"
        f"üìÖ –î–∞—Ç–∞: {format_date_russian(booking.date_time)}\n"
        f"‚è∞ –í—Ä–µ–º—è: {booking.date_time.strftime('%H:%M')}\n"
        f"ü™ë –°—Ç–æ–ª—ã: {tables}\n"
        f"üåê –ò—Å—Ç–æ—á–Ω–∏–∫: {booking.source.value}"
    )


def finalize_booking_approval(
        booking: Booking,
        *,
        admin_chat_id: int,
) -> None:
    """Finalize the booking approval workflow shared across admin handlers."""

    notify_user_booking_status(booking, True)
    set_final_booking_text(admin_chat_id, booking)
    logger.info("–ë—Ä–æ–Ω—å %s –±—ã–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞", booking.id)
    try:
        not_sent_bookings.put(booking)
    except Exception:
        logger.exception("Failed to enqueue approved booking %s", booking.id)
    finalize_booking_actions(booking.id)


def finalize_booking_actions(booking_id: str) -> None:
    clear_ephemeral_messages(booking_id)
    try:
        del bookings[booking_id]
        table_requests.pop(booking_id, None)
        alt_requests.pop(booking_id, None)
    except Exception:
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É %s –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞", booking_id)


def set_final_booking_text(chat_id: int, booking: Booking, is_success: bool = True) -> None:
    try:
        new_text = _build_admin_final_text(booking, is_success)
        bot.edit_message_text(new_text, chat_id=chat_id, message_id=booking.message_id or -1)
        logger.debug(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ {booking.id} —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º {is_success}")
    except Exception as exc:
        logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∑–∞—è–≤–∫–∏ {booking.id}: {exc}")
        raise
