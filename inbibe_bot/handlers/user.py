# –ö–æ–º–∞–Ω–¥–∞ /start ‚Äì –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –Ω–∞—á–∞–ª–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
import logging
import re
import uuid
from datetime import datetime

import telebot

from inbibe_bot.bot_instance import bot, ADMIN_GROUP_ID
from inbibe_bot.keyboards import (
    main_menu_keyboard,
    get_phone_keyboard,
    generate_date_keyboard,
    generate_time_keyboard,
)
from inbibe_bot.states import (
    STATE_WAITING_FOR_GUESTS,
    STATE_WAITING_FOR_TIME,
    STATE_IDLE,
    STATE_WAITING_FOR_NAME,
    STATE_WAITING_FOR_PHONE,
    STATE_WAITING_FOR_DATE,
)
from inbibe_bot.storage import user_states, bookings
from inbibe_bot.models import Booking, UserState
from inbibe_bot.utils import format_date_russian

logger = logging.getLogger(__name__)


@bot.message_handler(commands=["start"])  # type: ignore
def cmd_start(message):
    chat_id = message.chat.id
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç chat_id {chat_id}")
    if message.chat.type != "private":
        logger.debug(f"–ö–æ–º–∞–Ω–¥–∞ /start –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è —Ç–∏–ø–∞ —á–∞—Ç–∞: {message.chat.type}")
        return
    if chat_id in user_states:
        logger.debug(f"–£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
        del user_states[chat_id]
    user_states[chat_id] = UserState(STATE_IDLE)
    logger.debug(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id} –≤ {STATE_IDLE}")
    bot.send_message(
        chat_id,
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–∞—Ä *–ò–Ω–±–∞–π–±*!\n"
        "–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –¥–ª—è –≤–∞—Å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å —Å *15:00 –¥–æ 03:00*,\n"
        "–∞ –ø–æ *–ø—è—Ç–Ω–∏—Ü–∞–º –∏ —Å—É–±–±–æ—Ç–∞–º* ‚Äî —Å *15:00 –¥–æ 05:00*.\n\n"
        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ù–∞—á–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ¬ª.\n"
        "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.",
        reply_markup=main_menu_keyboard(),
        parse_mode="Markdown",
    )
    logger.info(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")


@bot.message_handler(func=lambda message: message.chat.type == "private")  # type: ignore
def handle_message(message):
    chat_id = message.chat.id
    text = message.text.strip()
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {chat_id}: {text}")

    if chat_id in user_states and user_states[chat_id].state == STATE_IDLE:
        logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ {STATE_IDLE}")
        if text.lower() == "–Ω–∞—á–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ":
            user_states[chat_id].state = STATE_WAITING_FOR_NAME
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –ø–µ—Ä–µ—à–µ–ª –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ {STATE_WAITING_FOR_NAME}")
            bot.send_message(chat_id, "–û—Ç–ª–∏—á–Ω–æ! –ö–∞–∫ –í–∞—Å –∑–æ–≤—É—Ç?", reply_markup=telebot.types.ReplyKeyboardRemove())
            return
        else:
            logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –Ω–µ –Ω–∞–∂–∞–ª '–Ω–∞—á–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ'")
            bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ù–∞—á–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ¬ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å.")
            return

    if chat_id not in user_states:
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ user_states")
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start")
        return

    state = user_states[chat_id].state
    data = user_states[chat_id].data

    if state == STATE_WAITING_FOR_NAME:
        data.name = text
        user_states[chat_id].state = STATE_WAITING_FOR_PHONE
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –≤–≤–µ–ª –∏–º—è: {text}")
        logger.debug(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id} –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {STATE_WAITING_FOR_PHONE}")
        bot.send_message(
            chat_id,
            "–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω.\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –µ–≥–æ –≤—Ä—É—á–Ω—É—é.",
            reply_markup=get_phone_keyboard(),
        )
    elif state == STATE_WAITING_FOR_PHONE:
        pattern = r"^(?:\+7|8)\d{10}$"
        if not re.match(pattern, text):
            logger.debug(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {text}")
            bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü—Ä–∏–º–µ—Ä: +79261234567 –∏–ª–∏ 89261234567")
            return
        data.phone = text
        user_states[chat_id].state = STATE_WAITING_FOR_DATE
        logger.info(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –≤–≤–µ–ª —Ç–µ–ª–µ—Ñ–æ–Ω: {text}. –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {STATE_WAITING_FOR_DATE}"
        )
        bot.send_message(chat_id, "–°–ø–∞—Å–∏–±–æ! –ù–æ–º–µ—Ä –ø—Ä–∏–Ω—è—Ç", reply_markup=telebot.types.ReplyKeyboardRemove())
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=generate_date_keyboard())
    elif state == STATE_WAITING_FOR_GUESTS:
        if not text.isdigit():
            logger.debug(f"–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ —á–∏—Å–ª–∞ –≥–æ—Å—Ç–µ–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {text}")
            bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≥–æ—Å—Ç–µ–π.")
            return
        data.guests = int(text)
        booking_id = str(uuid.uuid4())
        booking = Booking(booking_id, chat_id, data.name, data.phone, data.date_time, data.guests)
        bookings[booking_id] = booking
        logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –∑–∞—è–≤–∫–∞: {booking}")
        bot.send_message(chat_id, "–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –º—ã —Å –í–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è!.")
        del user_states[chat_id]
        booking_text = (
            f"üì• –ù–æ–≤–∞—è –±—Ä–æ–Ω—å (TG):\n"
            f"–ò–º—è: {booking.name}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {booking.phone}\n"
            f"–î–∞—Ç–∞: {format_date_russian(booking.date_time)}\n"
            f"–í—Ä–µ–º—è: {booking.date_time.strftime('%H:%M')}\n"
            f"–ì–æ—Å—Ç–µ–π: {booking.guests}"
        )
        markup = telebot.types.InlineKeyboardMarkup(row_width=3)
        btn_approve = telebot.types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"approve_{booking_id}")
        btn_alt = telebot.types.InlineKeyboardButton(
            "üïò –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É/–≤—Ä–µ–º—è", callback_data=f"approve_alt_{booking_id}"
        )
        btn_reject = telebot.types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{booking_id}")
        markup.add(btn_approve, btn_reject)
        markup.add(btn_alt)
        msg = bot.send_message(ADMIN_GROUP_ID, booking_text, reply_markup=markup)
        booking.message_id = msg.message_id
        logger.info(
            f"–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –≥—Ä—É–ø–ø—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤. message_id: {msg.message_id}"
        )


@bot.message_handler(content_types=["contact"])  # type: ignore
def handle_contact(message):
    chat_id = message.chat.id
    if chat_id not in user_states:
        logger.error(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ user_states –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞"
        )
        return
    if user_states[chat_id].state == STATE_WAITING_FOR_PHONE:
        phone = message.contact.phone_number
        user_states[chat_id].data.phone = phone
        user_states[chat_id].state = STATE_WAITING_FOR_DATE
        logger.info(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –ø–æ–¥–µ–ª–∏–ª—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º. –¢–µ–ª–µ—Ñ–æ–Ω: {phone}. –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {STATE_WAITING_FOR_DATE}"
        )
        bot.send_message(chat_id, "–°–ø–∞—Å–∏–±–æ! –ù–æ–º–µ—Ä –ø—Ä–∏–Ω—è—Ç", reply_markup=telebot.types.ReplyKeyboardRemove())
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=generate_date_keyboard())


@bot.callback_query_handler(func=lambda call: call.data.startswith("date_"))  # type: ignore
def handle_date_callback(call):
    chat_id = call.from_user.id
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –æ—Ç {chat_id}: {call.data}")
    if chat_id not in user_states or user_states[chat_id].state != STATE_WAITING_FOR_DATE:
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –¥–∞—Ç—ã")
        bot.answer_callback_query(call.id, "–í—Ä–µ–º—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –∏—Å—Ç–µ–∫–ª–æ –∏–ª–∏ –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–æ.")
        return
    selected_date_str = call.data.split("_", 1)[1]
    try:
        selected_date = datetime.strptime(selected_date_str, "%Y-%m-%d").date()
        logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –≤—ã–±—Ä–∞–ª –¥–∞—Ç—É: {selected_date}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –¥–∞—Ç—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {e}")
        bot.answer_callback_query(call.id, "–ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞.")
        return
    user_states[chat_id].state = STATE_WAITING_FOR_TIME
    markup = generate_time_keyboard(selected_date)

    bot.send_message(
        chat_id,
        f"–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ {selected_date.strftime('%d.%m')}:",
        reply_markup=markup,
    )

    bot.answer_callback_query(call.id, "–î–∞—Ç–∞ –≤—ã–±—Ä–∞–Ω–∞.")
    logger.debug(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id} –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {STATE_WAITING_FOR_TIME}")


@bot.callback_query_handler(func=lambda call: call.data.startswith("time_"))  # type: ignore
def handle_time_callback(call):
    chat_id = call.from_user.id
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç {chat_id}: {call.data}")
    if chat_id not in user_states or user_states[chat_id].state != STATE_WAITING_FOR_TIME:
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏")
        bot.answer_callback_query(call.id, "–í—Ä–µ–º—è –≤—ã–±–æ—Ä–∞ –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–æ.")
        return
    _, time_data = call.data.split("time_", 1)
    try:
        selected_dt = datetime.strptime(time_data, "%Y-%m-%d_%H:%M")
        logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –≤—ã–±—Ä–∞–ª –≤—Ä–µ–º—è: {selected_dt}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {e}")
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏.")
        return
    user_states[chat_id].data.date_time = selected_dt
    user_states[chat_id].state = STATE_WAITING_FOR_GUESTS

    bot.send_message(
        chat_id,
        f"–û—Ç–ª–∏—á–Ω–æ! üìÖ\n"
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {selected_dt:%d.%m –≤ %H:%M}.\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π:"
    )

    bot.answer_callback_query(call.id, "–í—Ä–µ–º—è –≤—ã–±—Ä–∞–Ω–æ.")
    logger.debug(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id} –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {STATE_WAITING_FOR_GUESTS}")
