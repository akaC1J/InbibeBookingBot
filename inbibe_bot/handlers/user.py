from __future__ import annotations

import logging
import re
import uuid
from datetime import datetime, date
from typing import Any, Final

import telebot
from telebot.types import Message, CallbackQuery, ReplyKeyboardRemove

from inbibe_bot.bot_instance import bot, ADMIN_GROUP_ID
from inbibe_bot.keyboards import (
    main_menu_keyboard,
    get_phone_keyboard,
    generate_date_keyboard,
    generate_time_keyboard,
)
from inbibe_bot.models import Booking, UserState
from inbibe_bot.states import (
    STATE_IDLE,
    STATE_WAITING_FOR_NAME,
    STATE_WAITING_FOR_PHONE,
    STATE_WAITING_FOR_DATE,
    STATE_WAITING_FOR_TIME,
    STATE_WAITING_FOR_GUESTS,
)
from inbibe_bot.storage import user_states, bookings
from inbibe_bot.utils import format_date_russian

logger = logging.getLogger(__name__)

PHONE_PATTERN: Final[re.Pattern[str]] = re.compile(r"^(?:\+7|8)\d{10}$")


# === /start ==================================================================

@bot.message_handler(commands=["start"])
def cmd_start(message: Message) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è."""
    chat_id = message.chat.id
    chat_type = message.chat.type
    logger.info("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç chat_id=%s", chat_id)

    if chat_type != "private":
        logger.debug("–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º /start –¥–ª—è —á–∞—Ç–∞ —Ç–∏–ø–∞ %s", chat_type)
        return

    user_states.pop(chat_id, None)
    user_states[chat_id] = UserState(state=STATE_IDLE)

    bot.send_message(
        chat_id,
        (
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–∞—Ä *–ò–Ω–±–∞–π–±*!\n"
            "–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å —Å *15:00 –¥–æ 03:00*,\n"
            "–∞ –ø–æ *–ø—è—Ç–Ω–∏—Ü–∞–º –∏ —Å—É–±–±–æ—Ç–∞–º* ‚Äî –¥–æ *05:00*.\n\n"
            "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ù–∞—á–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ¬ª.\n"
            "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ ‚Äî –≤–≤–µ–¥–∏—Ç–µ /start."
        ),
        reply_markup=main_menu_keyboard(),
        parse_mode="Markdown",
    )
    logger.info("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s", chat_id)


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π =====================================================

@bot.message_handler(func=lambda msg: msg.chat.type == "private")
def handle_message(message: Message) -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
    chat_id = message.chat.id
    text = (message.text or "").strip()
    logger.debug("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç %s: %s", chat_id, text)

    state_obj = user_states.get(chat_id)
    if not state_obj:
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start")
        logger.warning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ user_states", chat_id)
        return

    state = state_obj.state
    data = state_obj.data

    # === IDLE ‚Üí NAME ===
    if state == STATE_IDLE:
        if text.lower() == "–Ω–∞—á–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ":
            state_obj.state = STATE_WAITING_FOR_NAME
            bot.send_message(chat_id, "–û—Ç–ª–∏—á–Ω–æ! –ö–∞–∫ –í–∞—Å –∑–æ–≤—É—Ç?", reply_markup=ReplyKeyboardRemove())
            return
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ ¬´–ù–∞—á–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ¬ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
        return

    # === NAME ‚Üí PHONE ===
    if state == STATE_WAITING_FOR_NAME:
        data.name = text
        state_obj.state = STATE_WAITING_FOR_PHONE
        bot.send_message(
            chat_id,
            (
                "–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω.\n"
                "–ú–æ–∂–Ω–æ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é."
            ),
            reply_markup=get_phone_keyboard(),
        )
        return

    # === PHONE ‚Üí DATE ===
    if state == STATE_WAITING_FOR_PHONE:
        if not PHONE_PATTERN.match(text):
            bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü—Ä–∏–º–µ—Ä: +79261234567 –∏–ª–∏ 89261234567")
            return
        data.phone = text
        state_obj.state = STATE_WAITING_FOR_DATE
        bot.send_message(chat_id, "–°–ø–∞—Å–∏–±–æ! –ù–æ–º–µ—Ä –ø—Ä–∏–Ω—è—Ç.", reply_markup=ReplyKeyboardRemove())
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=generate_date_keyboard())
        return

    # === GUESTS ‚Üí BOOKING ===
    if state == STATE_WAITING_FOR_GUESTS:
        if not text.isdigit():
            bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π (—á–∏—Å–ª–æ–º).")
            return

        data.guests = int(text)
        booking_id = str(uuid.uuid4())

        booking = Booking(
            id=booking_id,
            user_id=chat_id,
            name=data.name,
            phone=data.phone,
            date_time=data.date_time,
            guests=data.guests,
        )

        bookings[booking_id] = booking
        del user_states[chat_id]

        bot.send_message(chat_id, "–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ú—ã —Å–∫–æ—Ä–æ —Å –í–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è!")
        _notify_admins_about_booking(booking)
        return


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ =====================================================

@bot.message_handler(content_types=["contact"])
def handle_contact(message: Message) -> None:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É ¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç¬ª."""
    chat_id = message.chat.id
    state_obj = user_states.get(chat_id)
    if not state_obj:
        logger.warning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞", chat_id)
        return

    if state_obj.state == STATE_WAITING_FOR_PHONE and message.contact:
        phone = message.contact.phone_number
        state_obj.data.phone = phone
        state_obj.state = STATE_WAITING_FOR_DATE

        bot.send_message(chat_id, "–°–ø–∞—Å–∏–±–æ! –ù–æ–º–µ—Ä –ø—Ä–∏–Ω—è—Ç.", reply_markup=ReplyKeyboardRemove())
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=generate_date_keyboard())
        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –ø–æ–¥–µ–ª–∏–ª—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º: %s", chat_id, phone)


# === Callback: –≤—ã–±–æ—Ä –¥–∞—Ç—ã ====================================================

@bot.callback_query_handler(func=lambda call: call.data.startswith("date_"))
def handle_date_callback(call: CallbackQuery) -> None:
    chat_id = call.from_user.id
    state_obj = user_states.get(chat_id)
    if not state_obj or state_obj.state != STATE_WAITING_FOR_DATE:
        bot.answer_callback_query(call.id, "–í—ã–±–æ—Ä –¥–∞—Ç—ã –±–æ–ª—å—à–µ –Ω–µ–∞–∫—Ç—É–∞–ª–µ–Ω.")
        return

    if call.data is None:
        bot.answer_callback_query(call.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π callback.")
        return

    selected_date_str = call.data.split("_", 1)[1]
    try:
        selected_date: date = datetime.strptime(selected_date_str, "%Y-%m-%d").date()
    except ValueError:
        bot.answer_callback_query(call.id, "–ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞.")
        return

    state_obj.state = STATE_WAITING_FOR_TIME
    bot.answer_callback_query(call.id, "–î–∞—Ç–∞ –≤—ã–±—Ä–∞–Ω–∞.")
    bot.send_message(
        chat_id,
        f"–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ {selected_date.strftime('%d.%m')}:",
        reply_markup=generate_time_keyboard(selected_date),
    )


# === Callback: –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ =================================================

@bot.callback_query_handler(func=lambda call: call.data.startswith("time_"))
def handle_time_callback(call: CallbackQuery) -> None:
    chat_id = call.from_user.id
    state_obj = user_states.get(chat_id)
    if not state_obj or state_obj.state != STATE_WAITING_FOR_TIME:
        bot.answer_callback_query(call.id, "–í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –±–æ–ª—å—à–µ –Ω–µ–∞–∫—Ç—É–∞–ª–µ–Ω.")
        return

    try:
        if call.data is None:
            bot.answer_callback_query(call.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π callback.")
            return

        _, time_str = call.data.split("time_", 1)
        selected_dt = datetime.strptime(time_str, "%Y-%m-%d_%H:%M")
    except (ValueError, IndexError):
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏.")
        return

    state_obj.data.date_time = selected_dt
    state_obj.state = STATE_WAITING_FOR_GUESTS

    bot.answer_callback_query(call.id, "–í—Ä–µ–º—è –≤—ã–±—Ä–∞–Ω–æ.")
    bot.send_message(
        chat_id,
        f"–û—Ç–ª–∏—á–Ω–æ! üìÖ\n–í—ã –≤—ã–±—Ä–∞–ª–∏ {selected_dt:%d.%m –≤ %H:%M}.\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π:",
    )


# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–µ =========================================================

def _notify_admins_about_booking(booking: Booking) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –æ –Ω–æ–≤–æ–π –±—Ä–æ–Ω–µ."""
    booking_text = (
        f"üì• –ù–æ–≤–∞—è –±—Ä–æ–Ω—å (TG):\n"
        f"–ò–º—è: {booking.name}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {booking.phone}\n"
        f"–î–∞—Ç–∞: {format_date_russian(booking.date_time)}\n"
        f"–í—Ä–µ–º—è: {booking.date_time.strftime('%H:%M')}\n"
        f"–ì–æ—Å—Ç–µ–π: {booking.guests}"
    )

    markup = telebot.types.InlineKeyboardMarkup(row_width=3)
    markup.add(
        telebot.types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"approve_{booking.id}"),
        telebot.types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{booking.id}"),
    )
    markup.add(
        telebot.types.InlineKeyboardButton("üïò –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É/–≤—Ä–µ–º—è", callback_data=f"approve_alt_{booking.id}")
    )

    msg = bot.send_message(ADMIN_GROUP_ID, booking_text, reply_markup=markup)
    booking.message_id = msg.message_id
    logger.info("–ó–∞—è–≤–∫–∞ %s –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –≥—Ä—É–ø–ø—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤", booking.id)
